package gupuru.paintcodesample;

import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import java.util.Stack;



/**
 * Created by gupuru on 2016/11/03.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author gupuru
 */
class DroidoStyleKit {
    // Resizing Behavior
    
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    
    // Tab 2
    
    public static void drawDroido(Canvas canvas) {
        DroidoStyleKit.drawDroido(canvas, new RectF(0f, 0f, 486f, 512f), ResizingBehavior.AspectFit);
    }
    
    public static void drawDroido(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint;
        
        // Local Colors
        int color = Color.argb(255, 95, 204, 82);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = DroidoStyleKit.resizingBehaviorApply(resizing, new RectF(0f, 0f, 486f, 512f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 486f, resizedFrame.height() / 512f);
        
        // android
        {
            // Rectangle
            RectF rectangleRect = new RectF(0.38f, 163.16f, 58.03f, 331.96f);
            Path rectanglePath = new Path();
            rectanglePath.addRoundRect(rectangleRect, 28.8f, 28.8f, Path.Direction.CW);
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(rectanglePath, paint);
            
            // Rectangle 2
            RectF rectangle2Rect = new RectF(427.97f, 163.16f, 485.63f, 331.96f);
            Path rectangle2Path = new Path();
            rectangle2Path.addRoundRect(rectangle2Rect, 28.8f, 28.8f, Path.Direction.CW);
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(rectangle2Path, paint);
            
            // Bezier
            RectF bezierRect = new RectF(69.29f, 163.16f, 418.12f, 512f);
            Path bezierPath = new Path();
            bezierPath.moveTo(69.29f, 163.16f);
            bezierPath.cubicTo(69.29f, 163.16f, 69.29f, 343.21f, 69.29f, 365.71f);
            bezierPath.cubicTo(69.29f, 388.22f, 96.1f, 399.47f, 103.04f, 399.47f);
            bezierPath.lineTo(145.24f, 399.47f);
            bezierPath.lineTo(145.24f, 483.87f);
            bezierPath.cubicTo(145.24f, 499.4f, 158.15f, 512f, 174.08f, 512f);
            bezierPath.cubicTo(190f, 512f, 202.91f, 499.4f, 202.91f, 483.87f);
            bezierPath.lineTo(202.91f, 399.47f);
            bezierPath.lineTo(281.68f, 399.47f);
            bezierPath.lineTo(281.68f, 483.87f);
            bezierPath.cubicTo(281.68f, 499.4f, 294.59f, 512f, 310.51f, 512f);
            bezierPath.cubicTo(326.44f, 512f, 339.35f, 499.4f, 339.35f, 483.87f);
            bezierPath.lineTo(339.35f, 399.47f);
            bezierPath.lineTo(384.36f, 399.47f);
            bezierPath.cubicTo(391.3f, 399.47f, 418.12f, 388.22f, 418.12f, 365.71f);
            bezierPath.cubicTo(418.12f, 343.21f, 418.12f, 163.16f, 418.12f, 163.16f);
            bezierPath.lineTo(69.29f, 163.16f);
            bezierPath.lineTo(69.29f, 163.16f);
            bezierPath.close();
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = new RectF(67.88f, 0f, 418.12f, 151.91f);
            Path bezier2Path = new Path();
            bezier2Path.moveTo(418.12f, 151.91f);
            bezier2Path.cubicTo(418.12f, 115.86f, 403.7f, 82.76f, 379.61f, 56.71f);
            bezier2Path.cubicTo(379.63f, 56.69f, 379.64f, 56.68f, 379.66f, 56.66f);
            bezier2Path.lineTo(411.49f, 24.84f);
            bezier2Path.cubicTo(415.88f, 20.44f, 415.88f, 13.32f, 411.49f, 8.92f);
            bezier2Path.cubicTo(407.09f, 4.53f, 399.97f, 4.53f, 395.58f, 8.92f);
            bezier2Path.lineTo(363.75f, 40.75f);
            bezier2Path.cubicTo(363.57f, 40.93f, 363.41f, 41.12f, 363.25f, 41.3f);
            bezier2Path.cubicTo(332.03f, 15.7f, 289.97f, 0f, 243.7f, 0f);
            bezier2Path.cubicTo(195.91f, 0f, 152.61f, 16.75f, 121.11f, 43.87f);
            bezier2Path.cubicTo(120.57f, 42.74f, 119.85f, 41.68f, 118.92f, 40.75f);
            bezier2Path.lineTo(87.09f, 8.92f);
            bezier2Path.cubicTo(82.69f, 4.53f, 75.57f, 4.53f, 71.17f, 8.92f);
            bezier2Path.cubicTo(66.78f, 13.32f, 66.78f, 20.44f, 71.17f, 24.84f);
            bezier2Path.lineTo(103f, 56.66f);
            bezier2Path.cubicTo(103.88f, 57.54f, 104.87f, 58.24f, 105.92f, 58.76f);
            bezier2Path.cubicTo(82.96f, 84.49f, 69.28f, 116.81f, 69.28f, 151.91f);
            bezier2Path.lineTo(418.12f, 151.91f);
            bezier2Path.lineTo(418.12f, 151.91f);
            bezier2Path.close();
            bezier2Path.moveTo(315.44f, 61.89f);
            bezier2Path.cubicTo(327.87f, 61.89f, 337.94f, 71.97f, 337.94f, 84.4f);
            bezier2Path.cubicTo(337.94f, 96.82f, 327.87f, 106.9f, 315.44f, 106.9f);
            bezier2Path.cubicTo(303.01f, 106.9f, 292.93f, 96.83f, 292.93f, 84.4f);
            bezier2Path.cubicTo(292.93f, 71.97f, 303.01f, 61.89f, 315.44f, 61.89f);
            bezier2Path.close();
            bezier2Path.moveTo(169.15f, 61.89f);
            bezier2Path.cubicTo(181.58f, 61.89f, 191.66f, 71.97f, 191.66f, 84.4f);
            bezier2Path.cubicTo(191.66f, 96.82f, 181.58f, 106.9f, 169.15f, 106.9f);
            bezier2Path.cubicTo(156.72f, 106.9f, 146.65f, 96.83f, 146.65f, 84.4f);
            bezier2Path.cubicTo(146.65f, 71.97f, 156.72f, 61.89f, 169.15f, 61.89f);
            bezier2Path.close();
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier2Path, paint);
        }
        
        canvas.restore();
    }
    
    // Tab
    
    public static void drawDroron(Canvas canvas, int fillColor, float leftAngle, float rightAngle) {
        DroidoStyleKit.drawDroron(canvas, new RectF(0f, 0f, 486f, 512f), ResizingBehavior.AspectFit, fillColor, leftAngle, rightAngle);
    }
    
    public static void drawDroron(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int fillColor, float leftAngle, float rightAngle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = DroidoStyleKit.resizingBehaviorApply(resizing, new RectF(0f, 0f, 486f, 512f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 486f, resizedFrame.height() / 512f);
        
        // Group
        {
            // Rectangle
            canvas.save();
            canvas.translate(30.3f, 191.44f);
            currentTransformation.peek().postTranslate(30.3f, 191.44f);
            canvas.rotate(-leftAngle);
            currentTransformation.peek().postRotate(-leftAngle);
            RectF rectangleRect = new RectF(-29.92f, -28.28f, 27.73f, 140.52f);
            Path rectanglePath = new Path();
            rectanglePath.addRoundRect(rectangleRect, 28.8f, 28.8f, Path.Direction.CW);
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(rectanglePath, paint);
            canvas.restore();
            
            // Rectangle 2
            canvas.save();
            canvas.translate(427.97f, 163.16f);
            currentTransformation.peek().postTranslate(427.97f, 163.16f);
            canvas.rotate(-rightAngle);
            currentTransformation.peek().postRotate(-rightAngle);
            RectF rectangle2Rect = new RectF(0f, 0f, 57.65f, 168.8f);
            Path rectangle2Path = new Path();
            rectangle2Path.addRoundRect(rectangle2Rect, 28.8f, 28.8f, Path.Direction.CW);
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(rectangle2Path, paint);
            canvas.restore();
            
            // Bezier
            RectF bezierRect = new RectF(69.29f, 163.16f, 418.12f, 512f);
            Path bezierPath = new Path();
            bezierPath.moveTo(69.29f, 163.16f);
            bezierPath.cubicTo(69.29f, 163.16f, 69.29f, 343.21f, 69.29f, 365.71f);
            bezierPath.cubicTo(69.29f, 388.22f, 96.1f, 399.47f, 103.04f, 399.47f);
            bezierPath.lineTo(145.24f, 399.47f);
            bezierPath.lineTo(145.24f, 483.87f);
            bezierPath.cubicTo(145.24f, 499.4f, 158.15f, 512f, 174.08f, 512f);
            bezierPath.cubicTo(190f, 512f, 202.91f, 499.4f, 202.91f, 483.87f);
            bezierPath.lineTo(202.91f, 399.47f);
            bezierPath.lineTo(281.68f, 399.47f);
            bezierPath.lineTo(281.68f, 483.87f);
            bezierPath.cubicTo(281.68f, 499.4f, 294.59f, 512f, 310.51f, 512f);
            bezierPath.cubicTo(326.44f, 512f, 339.35f, 499.4f, 339.35f, 483.87f);
            bezierPath.lineTo(339.35f, 399.47f);
            bezierPath.lineTo(384.36f, 399.47f);
            bezierPath.cubicTo(391.3f, 399.47f, 418.12f, 388.22f, 418.12f, 365.71f);
            bezierPath.cubicTo(418.12f, 343.21f, 418.12f, 163.16f, 418.12f, 163.16f);
            bezierPath.lineTo(69.29f, 163.16f);
            bezierPath.lineTo(69.29f, 163.16f);
            bezierPath.close();
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(bezierPath, paint);
            
            // Bezier 2
            RectF bezier2Rect = new RectF(67.88f, 0f, 418.12f, 151.91f);
            Path bezier2Path = new Path();
            bezier2Path.moveTo(418.12f, 151.91f);
            bezier2Path.cubicTo(418.12f, 115.86f, 403.7f, 82.76f, 379.61f, 56.71f);
            bezier2Path.cubicTo(379.63f, 56.69f, 379.64f, 56.68f, 379.66f, 56.66f);
            bezier2Path.lineTo(411.49f, 24.84f);
            bezier2Path.cubicTo(415.88f, 20.44f, 415.88f, 13.32f, 411.49f, 8.92f);
            bezier2Path.cubicTo(407.09f, 4.53f, 399.97f, 4.53f, 395.58f, 8.92f);
            bezier2Path.lineTo(363.75f, 40.75f);
            bezier2Path.cubicTo(363.57f, 40.93f, 363.41f, 41.12f, 363.25f, 41.3f);
            bezier2Path.cubicTo(332.03f, 15.7f, 289.97f, 0f, 243.7f, 0f);
            bezier2Path.cubicTo(195.91f, 0f, 152.61f, 16.75f, 121.11f, 43.87f);
            bezier2Path.cubicTo(120.57f, 42.74f, 119.85f, 41.68f, 118.92f, 40.75f);
            bezier2Path.lineTo(87.09f, 8.92f);
            bezier2Path.cubicTo(82.69f, 4.53f, 75.57f, 4.53f, 71.17f, 8.92f);
            bezier2Path.cubicTo(66.78f, 13.32f, 66.78f, 20.44f, 71.17f, 24.84f);
            bezier2Path.lineTo(103f, 56.66f);
            bezier2Path.cubicTo(103.88f, 57.54f, 104.87f, 58.24f, 105.92f, 58.76f);
            bezier2Path.cubicTo(82.96f, 84.49f, 69.28f, 116.81f, 69.28f, 151.91f);
            bezier2Path.lineTo(418.12f, 151.91f);
            bezier2Path.lineTo(418.12f, 151.91f);
            bezier2Path.close();
            bezier2Path.moveTo(315.44f, 61.89f);
            bezier2Path.cubicTo(327.87f, 61.89f, 337.94f, 71.97f, 337.94f, 84.4f);
            bezier2Path.cubicTo(337.94f, 96.82f, 327.87f, 106.9f, 315.44f, 106.9f);
            bezier2Path.cubicTo(303.01f, 106.9f, 292.93f, 96.83f, 292.93f, 84.4f);
            bezier2Path.cubicTo(292.93f, 71.97f, 303.01f, 61.89f, 315.44f, 61.89f);
            bezier2Path.close();
            bezier2Path.moveTo(169.15f, 61.89f);
            bezier2Path.cubicTo(181.58f, 61.89f, 191.66f, 71.97f, 191.66f, 84.4f);
            bezier2Path.cubicTo(191.66f, 96.82f, 181.58f, 106.9f, 169.15f, 106.9f);
            bezier2Path.cubicTo(156.72f, 106.9f, 146.65f, 96.83f, 146.65f, 84.4f);
            bezier2Path.cubicTo(146.65f, 71.97f, 156.72f, 61.89f, 169.15f, 61.89f);
            bezier2Path.close();
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor);
            canvas.drawPath(bezier2Path, paint);
        }
        
        canvas.restore();
    }
    
    // Tab 3
    
    public static void drawAndroidLogo(Canvas canvas) {
        DroidoStyleKit.drawAndroidLogo(canvas, new RectF(0f, 0f, 512f, 512f), ResizingBehavior.AspectFit);
    }
    
    public static void drawAndroidLogo(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // General Declarations
        Paint paint;
        
        // Local Colors
        int fillColor2 = Color.argb(255, 130, 217, 72);
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = DroidoStyleKit.resizingBehaviorApply(resizing, new RectF(0f, 0f, 512f, 512f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 512f, resizedFrame.height() / 512f);
        
        // Group
        {
            // Bezier
            RectF bezierRect = new RectF(90.07f, 0f, 421.93f, 512f);
            Path bezierPath = new Path();
            bezierPath.moveTo(90.07f, 346.07f);
            bezierPath.cubicTo(90.07f, 438.52f, 163.56f, 512f, 256f, 512f);
            bezierPath.cubicTo(348.44f, 512f, 421.93f, 438.52f, 421.93f, 346.07f);
            bezierPath.lineTo(421.93f, 251.26f);
            bezierPath.lineTo(90.07f, 251.26f);
            bezierPath.lineTo(90.07f, 346.07f);
            bezierPath.close();
            bezierPath.moveTo(353.19f, 71.11f);
            bezierPath.lineTo(402.96f, 21.33f);
            bezierPath.lineTo(384f, 2.37f);
            bezierPath.lineTo(329.48f, 56.89f);
            bezierPath.cubicTo(308.15f, 45.04f, 282.07f, 37.93f, 256f, 37.93f);
            bezierPath.cubicTo(229.93f, 37.93f, 203.85f, 45.04f, 182.52f, 54.52f);
            bezierPath.lineTo(128f, 0f);
            bezierPath.lineTo(109.04f, 21.33f);
            bezierPath.lineTo(158.81f, 71.11f);
            bezierPath.cubicTo(116.15f, 99.56f, 90.07f, 149.33f, 90.07f, 203.85f);
            bezierPath.lineTo(90.07f, 227.56f);
            bezierPath.lineTo(421.93f, 227.56f);
            bezierPath.lineTo(421.93f, 203.85f);
            bezierPath.cubicTo(421.93f, 149.33f, 395.85f, 99.56f, 353.19f, 71.11f);
            bezierPath.close();
            bezierPath.moveTo(184.89f, 180.15f);
            bezierPath.cubicTo(170.67f, 180.15f, 161.19f, 170.67f, 161.19f, 156.44f);
            bezierPath.cubicTo(161.19f, 142.22f, 170.67f, 132.74f, 184.89f, 132.74f);
            bezierPath.cubicTo(199.11f, 132.74f, 208.59f, 142.22f, 208.59f, 156.44f);
            bezierPath.cubicTo(208.59f, 170.67f, 199.11f, 180.15f, 184.89f, 180.15f);
            bezierPath.close();
            bezierPath.moveTo(327.11f, 180.15f);
            bezierPath.cubicTo(312.89f, 180.15f, 303.41f, 170.67f, 303.41f, 156.44f);
            bezierPath.cubicTo(303.41f, 142.22f, 312.89f, 132.74f, 327.11f, 132.74f);
            bezierPath.cubicTo(341.33f, 132.74f, 350.81f, 142.22f, 350.81f, 156.44f);
            bezierPath.cubicTo(350.81f, 170.67f, 341.33f, 180.15f, 327.11f, 180.15f);
            bezierPath.close();
            
            paint = new Paint();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(fillColor2);
            canvas.drawPath(bezierPath, paint);
        }
        
        canvas.restore();
    }
    
    
    // Canvas Images
    
    // Tab 3
    
    private static Bitmap imageOfAndroidLogo = null;
    public static Bitmap imageOfAndroidLogo() {
        if (imageOfAndroidLogo != null)
            return imageOfAndroidLogo;
        
        imageOfAndroidLogo = Bitmap.createBitmap(512, 512, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(imageOfAndroidLogo);
        DroidoStyleKit.drawAndroidLogo(canvas);
        
        return imageOfAndroidLogo;
    }
    
    
    // Resizing Behavior
    
    public static RectF resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target) {
        if (rect.equals(target) || target == null) {
            return rect;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            return target;
        }
        
        PointF ratio = new PointF();
        ratio.x = Math.abs(target.width() / rect.width());
        ratio.y = Math.abs(target.height() / rect.height());
        
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(ratio.x, ratio.y);
                break;
            }
            case AspectFill: {
                scale = Math.max(ratio.x, ratio.y);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        PointF newSize = new PointF(Math.abs(rect.width() * scale), Math.abs(rect.height() * scale));
        RectF result = new RectF(target.centerX(), target.centerY(), target.centerX(), target.centerY());
        result.inset(-newSize.x / 2f, -newSize.y / 2f);
        return result;
    }
    
    
}

class PaintCodeColor extends Color {
    private static float[] ColorToHSV(int originalColor) {
        float hsv[] = new float[3];
        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
        return hsv;
    }
    
    public static int colorByChangingHue(int originalColor, float newHue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[0] = newHue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[1] = newSaturation;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static int colorByChangingValue(int originalColor, float newValue) {
        float hsv[] = ColorToHSV(originalColor);
        hsv[2] = newValue;
        return HSVToColor(alpha(originalColor), hsv);
    }
    
    public static float hue(int color) {
        return ColorToHSV(color)[0];
    }
    
    public static float saturation(int color) {
        return ColorToHSV(color)[1];
    }
    
    public static float brightness(int color) {
        return ColorToHSV(color)[2];
    }
    
    public static int colorByChangingAlpha(int color, int newAlpha) {
        return argb(newAlpha, red(color), green(color), blue(color));
    }
    
    public static int colorByBlendingColors(int c1, float ratio, int c2) {
        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
            (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
            (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
            (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
    }
    
    public static int colorByApplyingHighlight(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
    }
    
    public static int colorByApplyingShadow(int color, float ratio) {
        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
    }
}